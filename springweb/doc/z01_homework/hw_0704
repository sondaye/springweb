2022-07-04
[1단계:확인] 1. 컨테이너에 1:1관계에 있는 펜과 노트를 객체를 선언하여 처리하고, 내용을 출력하세요
public class DIExp0704 {
	public static void main(String[] args) {
		String path="homework\\di0704.xml";
		AbstractApplicationContext ctx = new GenericXmlApplicationContext(path);
		System.out.println("예제 1번 펜과 노트 출력");
		Note note = ctx.getBean("note",Note.class);
		note.write();
		ctx.close();
	}	
}

<bean id="pen" class="homework.vo.Pen">
      	<constructor-arg value="젤펜"/>
      	<constructor-arg value="보라색"/>
      </bean>
      <bean id="note" class="homework.vo.Note">
      	<property name="name" value="다이어리"/>
      	<property name="pen" ref="pen"/>
      </bean>


[1단계:개념] 2. autowire 무엇인지 기술하고, 종류를 기술하세요
autowire는 자동 주입 설정을 말한다.
종류에 따라 빈과 매칭되는 다른 빈을 찾아 빈 간의 의존성을 자동으로 만족시키는 수단이다.
종류는 no(설정 안 함), byType(타입이 일치하면), byName(타입과 이름이 일치하면), 
constructor(생성자 매개변수의 타입과 일치하면), autodetect(자동으로 생성자나 기능 속성으로 설정) 가 있다.

[1단계:확인] 3. 놀이공원에 간 사람으로 1:1관계로 class를 설정하고 autowiring 옵션을 설정하여 처리하세요.
public class DIExp0704 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String path="homework\\di0704.xml";
		AbstractApplicationContext ctx = new GenericXmlApplicationContext(path);
		System.out.println("예제 3번 놀이공원과 사람 출력");
		PPerson pperson = ctx.getBean("PPerson",PPerson.class);
		pperson.payTicket();
		ctx.close();
	}	
}

	  <bean id="park" class="homework.vo.Park">
      	<property name="parkName" value="디즈니월드"/>
      	<property name="ticket" value="15만원"/>
      </bean>
      <bean id="PPerson" class="homework.vo.PPerson" autowire="byType">
      	<constructor-arg value="홍길동"/>
      </bean>


[1단계:개념] 4. autowire의 옵션 중, byType과 byName의 차이점을 기본예제를 통해서 설명하세요.
byType은 타입이 일치하는 경우 할당하므로 타입이 일치하는 객체를 여러개로 사용할 수 없다.
byName은 기능메서드의 이름으로 할당하므로 타입이 일치하는 객체가 여러개여도 가능하다.

[1단계:확인] 5. 마트와 마트에서 구매한 객체 Product 3개를 선언하고, 이 중 하나의 객체를 byName으로 설정해서 할당하게 처리
public class DIExp0704 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String path="homework\\di0704.xml";
		AbstractApplicationContext ctx = new GenericXmlApplicationContext(path);
		System.out.println("예제 5번 마트 (byName 사용)");
		Mart mart = ctx.getBean("mart",Mart.class);
		mart.Cart();
		ctx.close();
	}	
}

  <bean id="prd01" class="homework.vo.Product">
       	<constructor-arg value="체리"/>
       	<constructor-arg value="8000"/>
       	<constructor-arg value="2"/>
       </bean>
       <bean id="prd02" class="homework.vo.Product">
       	<constructor-arg value="귤"/>
       	<constructor-arg value="5000"/>
       	<constructor-arg value="6"/>
       </bean>
       <bean id="prd03" class="homework.vo.Product">
       	<constructor-arg value="블루베리"/>
       	<constructor-arg value="4000"/>
       	<constructor-arg value="2"/>
       </bean>
       <bean id="mart" class="homework.vo.Mart" autowire="byName">
       	<constructor-arg value="행복마트"/>
       </bean>

       
# 예제 5번 강사님 설명
1) Product 클래스: 물건명, 가격, 갯수
   생성자: 필드값 초기화
2) Mart 클래스: 마트명, Product
   생성자: 필드값 초기화

   public void setProduct01(Product product){}
   autowire="byName" 이고 생성된 id값이 product01일 때, 할당되는 set property 선언