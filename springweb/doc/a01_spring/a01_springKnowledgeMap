# 스프링의 지식체계 계열화
1. 스프링의 기본 개념 이해
	- 스프링 mvc
	- 컨테이너
	- 제어 역전

2. 개발 환경 설정
	1) dynamic web project 생성
	2) lib: 필요한 jar
	3) 컨테이너 설정 (dispatcher-servlet.xml)
	   springweb\src\main\webapp\WEB-INF
	   하위에 dispatcher-servlet.xml 파일 만들기
	4) web.xml: 프레임워크에서 지원하는 front controller 선언,
		 		요청값에 대한 한글 처리를 위해 filtering 선언
		 		http://localhost:7080 등의 웹 주소를 호출하면 가장 먼저 호출됨.
	5) 초기, 화면 로딩을 위한 model/view/controller 처리
	6) 기본적인 front end단 모듈 설정 (bootstrap/jquery) - w3schools bootstrap5 참고 / jqueryui.com 참고

3. 스프링의 mvc 기본 처리 순서
	0) controller 클래스 선언: 패키지명.클래스명 -> dispatcher-servlet.xml 에 bean으로 등록
	   view 선언: view 로 사용할 jsp 파일을 WEB-INF 하위에 폴더와 파일 생성
				 ex) 웹주소에 pororo/01 로 파일 주소가 노출되면 모든 경로에서 접근 가능함. (보안 문제)
				     -> 위와 같이 경로를 알면 접근하는 방식을 방지하기 위해 
				        WEB-INF에 특정한 경로와 파일로 view 단을 호출하게 했다.
				        WEB-INF는 보안이 적용된 폴더이므로 서버에서 코드로 호출하지 않으면 외부에서 url로 접근이 불가능하다.
				        // WEB-INF 하위에 있는 view.jsp 를 바로 실행하면 HTTP 404 에러 발생함.
				        // 이미지와 같은 파일들은 WEB-INF 파일에서 부르면 controller 가 과부하 생길 수 있으므로 가급적이면 외부에서 작성하길 권장.
				        
	1) controller 선언
		@Controller: 클래스명 위에 선언
	2) url 에서 기능 메서드 별로 접근할 수 있는 메서드 선언
		// http://localhost:7080/springweb/call01.do
		// 클래스와 상관없이 모든 controller에서 동일한 주소값을 사용할 수 없다!
		// 컨트롤러 a01에서 call01.do 를 사용했으면 a02에서 사용할 수 없음.
		// 중복 사용하면 HTTP 500 내부 서버 에러가 발생함
		@RequestMapping("call01.do")
		public String call01(){
			return "view단 경로 및 파일 설정";
		}
	3) 요청값 처리
	4) 리턴 형식으로 view단 호출 (default 로 forward 형식을 사용함)
		- forward: request, response 같이 전달하며 모델값 함께 전송함 // rd.forward(request, response)
		- redirect: 페이지를 호출할 때, 모델값 전송하지 않음 // response.sendRedirect(page)

4. 스프링 컨테이너 이해를 위한 DI 제어역전

5. 스프링 MVC 심화

6. 스프링에서 database 처리를 위한 mybatis framework

7. 기타 실무예제
	1) 파일 업로드
	2) ajax 처리
	3) 웹 소켓을 이용한 실시간 채팅
	4) 다국어 처리
	5) 답변형 게시판(리스트/등록/상세화면/수정/답글/파일업로드/페이지처리)
		= spring boot 환경에서 게시판 처리
	6) 스프링에서 session 처리
	7) 메일 발송 처리
