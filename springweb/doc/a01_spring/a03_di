# DI (dependency injection)

1. spring framework에서 사용되는 컨테이너에서 처리되는 개념이다.
   스프링 프레임워크의 핵심 개념으로 이에 대한 이론과 실제 처리 방법을 알면
   스프링의 환경설정과 객체 사용의 명확한 기준을 정립하고 활용할 수 있다.
   
2. 지식계열화 (di를 이해하고 사용하기 위한 단계별 개념)
	1) 스프링의 객체 사용 매커니즘
		만능키트 -> 스프링에서는 핵심 객체를 컨테이너 메모리에 올려서 호출하는 식으로 사용한다.
		
		호출 순서: 주소 -> 웹서버 -> 웹서버가 web.xml 호출 -> 컨테이너 호출 (dispatcher-servlet.xml)
					 -> 객체 메모리 로딩 -> 그 주소에 mapping controller, 메서드 호출
					 -> model -> view
		
	2) IOC (Inversion of Controller) 의 이해
		제어권의 역전이란?
		- 객체의 생성, 생명주기의 관리까지 모든 객체에 대한 제어권이 바뀌었다는 것을 의미함.
		- 컴포넌트 의존 관계 결정과 설정 및 생명주기 해결을 위한 디자인 패턴을 말한다.
			cf) 스프링 프레임워크도 객체에 대한 생성 및 생명주기 관리를 위한 기능을 제공한다.
				즉 IOC 컨테이너 기능을 제공한다.
		IOC 컨테이너는 객체의 생성을 책임지고, 의존성을 관리한다.
		POJO (plain old java object) 의 생성, 초기화, 서비스, 소멸에 대한 권한을 가진다.
		개발자들이 직접 pojo를 생성할 수 있지만 컨테이너에게 맡긴다.
		
	3) IOC 에서 파생하는 개념
		DL (dependency lookup) 이란?
		- 저장소에 저장되어있는 bean에 접근하기 위해 컨테이너가 제공하는 api를 이용하여 bean을 lookup 하는 것
		
	4) DI 개념
	   각 클래스 간의 의존관계를 bean 설정 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것
	   - setter injection
	   - constructor injection
	   - method injection
	   
	5) 스프링 컨테이너 활용 연습 (xml -> java)
	   웹서버가 로딩될 때 컨테이너를 활용해서 웹프로그램 처리 -> 귀찮음
	   그래서 스프링 컨테이너 활용해 간단하게 java main() 에 컨테이너 활용을 연습할 수 있도록 한다.
	   .xml (컨테이너 파일) -> java 클래스 선언 후 xml로 객체 생성되게 처리 -> 기능메서드 (property 설정) 를 통해 데이터 할당
	   -> 이 컨테이너를 java단에서 호출하여 실제 객체가 컨테이너에서 어떻게 메모리 할당 및 사용되는 지를 확인함. 
	   
	   ex) DIExp12.java , d12.xml 생성
	   	   Product vo 생성 (물건명 가격 갯수)
	   	   xml에 property 할당 및 출력
	   	   
	   	   처리순서
	   	   1) Product 클래스 선언 필드로 물건명, 가격, 갯수 선언
	   	   2) d12.xml 컨테이너에서 객체를 생성하고 데이터 할당, id 로 외부에서 호출할 수 있게 선언
	   	   3) DIExp12.java 에서 id 로 객체를 호출하여 main() 에서 해당 객체가 생성 및 property를 getXX() 로 출력될 수 있게 함.
	   	   
# 객체와 객체의 의존 관계 설정
1. 클래스 구조 선언
	1) HP (핸드폰 클래스): 번호, 제조사
	2) HPerson (핸드폰을 가지고 있는 사람 클래스): 이름, 핸드폰
	3) show() 기능메서드로 호출
	   	 
2. 컨테이너에서 설정 관계
	1) 직접적으로 객체와 객체의 연관관계 설정
		HP 선언
		HPerson 선언
			property를 위에 선언한 HP 객체가 할당하도록 선언
			
	2) HPerson autowire 를 선언해 속성에 따라
	   	byType: 컨테이너에 해당 타입이 선언되어 있으면 할당
	   	byName: 컨테이너에 해당 타입이 선언되어 있고 할당할 객체의 id와 기능메서드의 setProperty 이름이 동일할 때
	   자동으로 HP와 관계를 설정해준다.
	   
3. 컨테이너 + 클래스 선언을 통한 autowire 선언
	1) 컨테이너에서는 객체만 생성되게 처리
	2) 클래스를 선언할 때, autowiring이 필요한 부분에 대해 @(어노테이션)을 이용해 autowiring 선언
	
# Autowired (자동 주입 설정)
1. 스프링 빈의 요구사항과 매칭되는 애플리케이션 컨텍스트 상에서 다른 빈을 찾아 빈 간의 의존성을 자동으로 만족시키도록 하는 수단이다.
2. 의존성 자동 주입 설정 옵션
	1) no: 의존성 자동 주입이 일어나지 않게 설정
	2) byType: 할당할 type(객체)이 있으면 자동으로 주입되게 처리한다
	3) byName: type이 있고, 기능메서드명이 객체의 참조명과 같을 때 처리된다.
	4) constructor: 의존성 자동 주입이 생성자 매개변수의 type으로 결정된다.
	5) autodetect: 자동으로 생성자나 기능 property로 설정된다.
	
# 컨테이너의 자동 객체 로딩
1. 컨테이너 선언에 있어서 특정 패키지를 지정하여 해당 범위에 있는 클래스를 특정한 패턴에 의해 객체로 로딩할 수 있다.
2. 처리 순서
	1) 패키지 단위로 로딩하고자 하는 클래스 선언
	2) 컨테이너(@@.xml)에서 특정 패키지를 지정하여 포함된 클래스를 filtering 방식을 선언해 객체 선택 처리
	3) 속성값
	   base-package: 대상 패키지 선언
	   context:include-filter: filter 기준으로 설정하는 내용(포함)
	   context:exclude-filter: filter 기준으로 배제하는 내용
	   type: filter 대상에 대한 type 지정 ex) annotation, regex
	   expression: 실제 쓰이는 대상이 되는 클래스 선언
3. 호출 처리
	1) 각 클래스에 @Component 를 선언하면 클래스명의 첫번쨰 문자는 소문자로 변환되어 id/name으로 인식된다.
	2) 위 식별자는 @Component("식별자명") 으로 명시적으로 처리할 수 있다.
	   일반적으로 패키지는 다르지만 동일한 클래스명을 하나의 컨테이너로 처리할 때 식별자가 충돌이 나는 경우 사용한다.
	   
4. 소스상 자동 autowiring 처리
	1) 위와 같이 Component가 선언되어 있을 떄, 여러가지 특정한 코드를 통해 필드나 기능 메서드의 상단에
	   @Autowiried라는 키워드를 통해서 객체 간의 자동으로 메모리가 할당하게 할 수 있다.
	2) 컨테이너에서 autowire 옵션으로 위에 선언된 여러가지 옵션을 서넝할 필요없이,
	   바로 추가되는 클래스에서 선언하여 객체를 자동으로 할당되게 한다.
	3) 실무적으로 MV 패턴에서 Controller는 Service 객체를
	   Service 객체는 Dao 객체를 필드로 선언하면서 @Autowired 옵션으로 new XXX() 없이
	   객체가 컨테이너에 로딩된 메모리를 사용할 수 있게 해준다.	 
	     
# 공통 정보 처리 파일 설정
1. 개발에 있어서 공통으로 적용될 정보는 특정한 DB나 파일로 설정해서 처리하면,
   이 공통 적용 파일만 변경되면 모든 소스에 검색해서 변경하지 않더라도 한번에 변경이 가능하다
   ex) 로컬 서버 정보(DB 서버, WAS서버, 파일서버, 메일서버 등)에서 개발서버/테스트서버/운영서버 등으로 변경시
2. 설정 순서
	1) 특정 경로에 파일로 설정 파일 생성 및 정보 기록
		- 일반적으로 classpath로 잡힌  java 폴더 하위에 경로와 파일에 정리한다
	2) 컨테이너에서 해당 경로의 파일을 지정
		<context:property-placeholder location="classpath:/폴더명/파일명">
		파일내용
		jdbc.driver=jdbc.odbc.driver.driverName
		oracle.account=scott
		oracle.pass=7777
		fileupload=c:\\gogo\\fileupload\\
		
	3) 컨테이너에서 해당 객체의 설정값 지정
		${key}: 위 파일에 지정된 key
		ex) ${jdbc.driver}
	4) 각 소스 파일에서 해당 설정값 지정 및 호출
		@Value("${key}")
		private String info01;
		
		ex) @Value("${oracle.account}")
			private String reposit; 	// 공통 설정 파일에 지정된 경로가 문자열로 할당